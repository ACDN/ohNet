<#@ assembly name="UpnpServiceMake.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Zapp.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
	Document u = new Document(TemplateArgument("xml"));
#>
# Auto-generated file.  DO NOT EDIT DIRECTLY
# Update CpUpnpMakeProxies.tt and run
#    make generate-makefiles
# to apply any updates

objects_proxies = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
                  $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext) \
                  $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) \
                  $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.$(objext) \
<#  } #>

# Service proxies have well controlled dependencies so we can document a more limited set of headers
headers_proxy = $(inc_build)/Cpp/Buffer.h \
                $(inc_build)/Cpp/Buffer.inl \
                $(inc_build)/Cpp/Exception.h \
                $(inc_build)/Cpp/Functor.h \
                $(inc_build)/Cpp/FunctorAsync.h \
                $(inc_build)/Cpp/ZappTypes.h \
                $(inc_build)/Cpp/CpProxy.h \
                $(inc_build)/CpiService.h \
                $(inc_build)/Service.h \
                $(inc_build)/Thread.h \
                $(inc_build)/AsyncPrivate.h

proxy_dotnet_assemblies = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
		Cp<#=FilePrefixTypeAndVersion(s)#>.net.dll \
<#  } #>

proxy_dotnet_assemblies_with_path = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
		$(objdir)Cp<#=FilePrefixTypeAndVersion(s)#>.net.dll \
<#  } #>


proxies : upnp_core $(objects_proxies)
	$(ar)ZappProxies.$(libext) $(objects_proxies)
<#  foreach (Service s in u.iServices) #>
<#  { #>
$(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext) : $(proxyCppCore)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.cpp $(headers_proxy) $(inc_build)/Cpp/Core/Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.h
	$(compiler)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext) -c $(cflags) $(includes) $(proxyCppCore)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.cpp
$(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) : $(proxyC)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.cpp $(headers_proxy) $(inc_build)/C/Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.h
	$(compiler)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) -c $(cflags) $(includes) $(proxyC)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.cpp
$(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.$(objext) : $(proxyCppStd)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.cpp $(headers_proxy) $(inc_build)/Cpp/Std/Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.h
	$(compiler)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.$(objext) -c $(cflags) $(includes) $(proxyCppStd)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.cpp
<#  } #>

proxy_dlls = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
             Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Dll \
<#  } #>

CpProxyDlls: $(proxy_dlls)

<#  foreach (Service s in u.iServices) #>
<#  { #>
Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Dll: $(objdir)$(dllprefix)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(dllext)
$(objdir)$(dllprefix)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(dllext) : ZappUpnpDll $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext)
	$(link_dll_service) $(linkoutput)$(objdir)$(dllprefix)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(dllext) $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext)
<#  } #>

# Proxy assemblies for .NET:

CpProxyDotNetAssemblies: $(proxy_dotnet_assemblies_with_path)

<# foreach (Service s in u.iServices) #>
<# { #>
$(objdir)Cp<#=FilePrefixTypeAndVersion(s)#>.net.dll: $(objdir)Zapp.net.dll $(proxyCs)Cp<#=FilePrefixTypeAndVersion(s)#>.cs
	$(csharp) /unsafe /t:library \
		/out:$(objdir)Cp<#=FilePrefixTypeAndVersion(s)#>.net.dll \
		/reference:$(objdir)Zapp.net.dll \
		$(proxyCs)Cp<#=FilePrefixTypeAndVersion(s)#>.cs
<# } #>

<#+
string FilePrefixTypeAndVersion(Service s)
{
    return FilePrefix(s) + s.iType.ToString() + s.iVersion.ToString();
}
string FilePrefix(Service s)
{
    string prefix = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = s.iDomain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        prefix += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            prefix += str.Substring(1, str.Length-1);
        }
    }
    return prefix;
}

string TemplateArgument(string aName)
{
	string[] args =  System.Environment.GetCommandLineArgs();
		
	bool isarg = false;
	
	foreach (string arg in args)
	{
		if (isarg)
		{
			string[] parts = arg.Split(new char[] {':'});
			
			if (parts.Length == 2)
			{
				if (parts[0] == aName)
				{
					return (parts[1]);
				}
			}
			
			isarg = false;
			continue;
		}
		
		if (arg == "-a")
		{
			isarg = true;
		}
	}
	
	throw (new ArgumentException(aName + " not specified"));
}
#>
